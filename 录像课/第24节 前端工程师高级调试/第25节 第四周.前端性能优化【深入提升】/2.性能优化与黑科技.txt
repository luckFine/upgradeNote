性能优化：
目标：
1.用户体验
2.执行效率
3.减轻服务器压力
限制：
1.cdn，安全性问题
2.一致性，分布性缓存
3.可维护性
4.成本，投入成本和产出
5.优化策略，对于只读和交互的优化方向是不一样的

前端性能优化的场景：
1.web浏览器层
2.http层

一般性特点：
1.js执行效率，谷歌v8有一套即时编译，会感知js热点，会把性能的代码编译成机器码
2.现在的编译器有优化，只会保留会用到的变量
3.浏览器有两个引擎，一个js引擎，一个render引擎，两个之间是有通信的，通信是有成本的
4.js使用单线程牺牲了一部分性能，保证了dom和js的一致性
5.渲染效率，循环和setTimeout
6.重排，重绘
7.webwiew，兼容性问题，性能问题
8.http请求，请求并发请求数量限制，网络信号

amp针对的场景
资讯页面，非spa，要求第一时间打开
特点：
1.机器性能
2.浏览器性能
3.网速
4.用户非刚需
权衡：
1.减少请求
2.减小体积
3.牺牲一部分ue（用户体验），来换取性能
4.牺牲一部分开发效率，来换取性能

amp page
1.图片，内置width
2.禁止外链式css，必须在head里，合并css，禁止filter，禁止通配符，禁止行内式，禁止import
总结：
避免多次渲染，不发额外请求，































