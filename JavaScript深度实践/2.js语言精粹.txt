1.语句是优先的，可以解释成语句的东西是不会解释成表达式的
所以：{a:1} 相当于 if(1){a:1} , 所以{a:1} 的值是1,但这个1不是真正的1

2.自执行函数
(function(){})(): 后面的()表示执行，调用前面的function
function(){}():解析器解析不了
(function(){}()): ()里是表达式，所以外面的表达式是立刻获取里面的表达式的返回值，所以会让函数立刻执行
所以：
~!+-function(){}都会触发执行

3.高阶函数：将函数作为参数的函数

4.函数式编程应该和指令式编程对比
指令式编程是每句语句都有执行结果
函数是编程是确定的输入会得到确定的输出

5.滥用闭包会造成性能问题，但是有时闭包可以优化性能

6.惰性函数:像兼容性的fn都可以写成惰性函数

7.柯里化:一种使用部分参数创建定向函数的方式，如jq对于对象判断的方式

8.函数式编程：写函数以生成更简单的函数，而将一次性变化的东西抽象到里面

9.尾递归：在最后调用自己

10.反柯里化：Function.prototype.call.apply

封装特征，抽象变化


第二节课：
1.原型
对于函数：var a = function(){}; a.prototype是一个包含了这个函数的对象b，b.constructor === a;
a.constructor === Function;Function.constructor === Function;Function.prototype === f(){native code};
对于Object：
实际上，Object也是一个函数，也可以认为是Function的实例，所以Object.constructor === Function

2.构造函数：
return 简单数据类型，与不return一样

第三节课
es6的模块化和amd模块化的区别：
es6可以解构引入，amd需要全部引入

