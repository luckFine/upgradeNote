1.微前端的概念
2.场景
3.架构实现方案

1.概念：
2016年插兜我藕丝？提出的概念，把服务端 的微服务拉倒前端
可以把应用分成不同的 组，不同的框架去弄
为为了解决大型应用 大型应用 ， 为了很多组解决的方案
允许使用不同的框架，不同的组去维护
细看：
特点：
1.技术无关，可以选择自己的技术栈，不收同一项目其他团队影响
2.业务独立，交付产品可以独立使用，商品的服务挂掉了，不会影响其他服务，业务之间没有耦合，感觉不到别人的存在，
3.样式独立，样式不会污染其他组件
4.原生支持【目前很难做到】，交付出的东西都可以使用浏览器原生API，不需要要求使用封装后的API

他不是一个技术，而是一个架构，意味着  什么的 聚合

难点：
怎么做样式隔离？
怎么做代码独立？包含很多概念，要求服务部署也是独立的


微服务和微前端对比： 对比讲 ， reply
1.微服务：独立服务，服务不会影响其他服务，调用接口是调用服务品台
1.服务治理：

4.服务治理：监控，
好处：拆分得足够细，关注点更精确

微前端和微服务一样 ，也是划分业务

总结：好处：业务只关注业务，通用的一层是通用层或治理层，关注业务的通信，开发效率快，业务解耦合


微前端基本组成
1.主框架
应用的发现与调度
转场动画，日志上报
应用隔离、降级--和限流都是服务端的任务，进程挂了我就显示备选方案、鉴权--是指验证用户是否拥有访问系统的权利
应用间的通信

主工程挂了？
切入的思路
1.如何保证主工程不挂？
2.挂了怎么办？

1.强大的监控，及时发现，修复
2.如果发现了，修复或者切换备用方案



2.微前端应用场景
将应用拆分为多个独立的应用，通过导航和动态加载来实现无缝切换



3.微前端实现方案
微前端做两件事：拆，合

拆分方式4种：
1.大仓库拆分独立的模块，统一构建
电子商务
---product
---order
---recommend
webpack.config.js
publish.js
2.大仓库拆分成小仓库,做成npm包，集成主服务
---main
    dependency
        ---git1 product
        ---git2 order
3.构建成独立应用，通常iframe方式
xx.com/product
xx.com/order
4.拆分成多个仓库
构建出独立的js，通过主页面加载，webcomponents

常见技术方案：
1.iframe
问题：
对于一些公用UI组件，仍然需要重复加载
iframe嵌套问题
移动端适配问题
优势：
改造成本低
沙河模型，天然隔离，不需要考虑样式污染，应用之间无影响

2.webcomponents
用三个对象



3.在不同的框架上设计通讯，加载机制，比如spa
缺点：首次加载的js很多，效率比较低



同一个项目需不需要不同的技术栈？
没必要秀
业务隔离方面还有那些问题？


微前端解决了什么问题？
解决应用大，维护成本高的问题
代码复杂度，多人协作难
模块容易相互影响，一个模块出错，另外的模块影响
维护性差，不利于横向拓展
无法独立部署，独立部署是为了服务解耦


进一步
iframe改进
考虑样式components